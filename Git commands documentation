SETTING UP REPOSITORY

GitHub Repository Link:                                                                           https://github.com/thami92/thami92/new/main
clone github to local repository:       
Check the status of your files to make sure your files are not being tracked                      $ git status
Stage your changes.                                                                               $ git add
Commit your changes with a descriptive message.                                                   $ git commit -m "Add new file bikeshare.py"
Push your commit to your remote repository.                                                       $ git push origin master

IMPROVE DOCUMENTATION

Create a branch named documentation on your local repository.                                     $ git branch documentation
Switch to the documentation branch.                                                               $ git checkout documentation
Stage your changes.                                                                               $ git add README.md
Commit your work with a descriptive message.                                                      $ git commit -m "Change README.md documentation"
Push your commit to your remote repository branch.                                                $ git push origin documentation
Switch back to the master branch.                                                                 $ git checkout master

ADDITIONAL CHANGES TO DOCUMENTATION

Switch to the documentation branch.                                                               $ git checkout documentation
After each change, stage and commit your changes. When you commit your work, you should use a descriptive message of the changes made. 
Your changes should be small and aligned with your commit message.                                $ git add . $ git commit -m “Improve function choice docstrings” $ git add .$ git commit -m “Changes made to README.md documentation”                                                                            
Push your changes to the remote repository branch.                                                $ git push origin documentation
Switch back to the master branch.                                                                 $ git checkout master
Check the local repository log to see how all the branches have changed.                          $ git log --oneline --graph --all

REFACTOR CODE

Create a branch named refactoring on your local repository.                                       $ git checkout -b refactoring
Switch to the refactoring branch.                                                                 $ git checkout -b refactoring
For each change, stage and commit your work
with a descriptive message of the changes made.                                                   $ git commit -m "Add print statement warning regarding Washington's lack of user data". $ git commit -m “Add exception to trip duration stats”
Push your commits to your remote repository branch.                                               $ git push origin refactoring
Switch back to the master branch.                                                                 $ git checkout master
Check the local repository log to see how all the branches have changed.                          $ git log --graph --all --oneline
Switch to the master branch.                                                                      $ git checkout master
B. Pull the changes you and your coworkers
might have made in the passing days (in this
case, you won't have any updates, but pulling
changes is often the first thing you do each day).                                                $ git pull origin
Since your changes are all ready to go, merge
all the branches into the master. Address any
merge conflicts. If you split up your work among your branches correctly, you should
have no merge conflicts.                                                                          $ git merge refactoring $ git merge documentation
Push the repository to your remote repository.                                                    $ git push origin


